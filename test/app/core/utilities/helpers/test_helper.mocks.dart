// Mocks generated by Mockito 5.4.4 from annotations
// in rock_n_roll_forecast/test/app/core/utilities/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i21;
import 'dart:convert' as _i40;
import 'dart:typed_data' as _i41;

import 'package:connectivity_plus/connectivity_plus.dart' as _i47;
import 'package:dartz/dartz.dart' as _i6;
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i1;
import 'package:flutter/services.dart' as _i42;
import 'package:flutter/src/services/binary_messenger.dart' as _i17;
import 'package:flutter/src/services/message_codec.dart' as _i16;
import 'package:flutter_bloc/flutter_bloc.dart' as _i22;
import 'package:hive/hive.dart' as _i15;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i44;
import 'package:hive/src/box/default_key_comparator.dart' as _i43;
import 'package:http/http.dart' as _i12;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i19;
import 'package:rock_n_roll_forecast/app/core/errors/failure.dart' as _i14;
import 'package:rock_n_roll_forecast/app/core/utilities/adapters/connectivity_adapter/connectivity_adapter.dart'
    as _i39;
import 'package:rock_n_roll_forecast/app/core/utilities/adapters/local_storage_adapter/hive_service.dart'
    as _i9;
import 'package:rock_n_roll_forecast/app/core/utilities/helpers/location_helper.dart'
    as _i46;
import 'package:rock_n_roll_forecast/app/data/datasources/local_datasource/local_datasource.dart'
    as _i10;
import 'package:rock_n_roll_forecast/app/data/datasources/remote_datasources/remote_datasource.dart'
    as _i11;
import 'package:rock_n_roll_forecast/app/data/datasources/remote_datasources/remote_datasource_impl.dart'
    as _i37;
import 'package:rock_n_roll_forecast/app/data/models/weather_model.dart'
    as _i13;
import 'package:rock_n_roll_forecast/app/domain/entities/forecast_entity.dart'
    as _i8;
import 'package:rock_n_roll_forecast/app/domain/entities/location_entity.dart'
    as _i30;
import 'package:rock_n_roll_forecast/app/domain/entities/weather_entity.dart'
    as _i7;
import 'package:rock_n_roll_forecast/app/modules/weather/data/datasources/local_datasource/local_datasource_impl.dart'
    as _i32;
import 'package:rock_n_roll_forecast/app/modules/weather/data/models/forecast_model.dart'
    as _i31;
import 'package:rock_n_roll_forecast/app/modules/weather/data/repositories/local_repository_impl.dart'
    as _i33;
import 'package:rock_n_roll_forecast/app/modules/weather/data/repositories/remote_repository_impl.dart'
    as _i35;
import 'package:rock_n_roll_forecast/app/modules/weather/domain/repositories/forecast_repository.dart'
    as _i36;
import 'package:rock_n_roll_forecast/app/modules/weather/domain/repositories/weather_repository.dart'
    as _i34;
import 'package:rock_n_roll_forecast/app/modules/weather/domain/usecases/forecast_usecase.dart'
    as _i28;
import 'package:rock_n_roll_forecast/app/modules/weather/domain/usecases/local_usecases/cache_forecast_usecase.dart'
    as _i24;
import 'package:rock_n_roll_forecast/app/modules/weather/domain/usecases/local_usecases/cache_weather_usecase.dart'
    as _i25;
import 'package:rock_n_roll_forecast/app/modules/weather/domain/usecases/local_usecases/offline_forecast_usecase.dart'
    as _i26;
import 'package:rock_n_roll_forecast/app/modules/weather/domain/usecases/local_usecases/offline_weather_usecase.dart'
    as _i27;
import 'package:rock_n_roll_forecast/app/modules/weather/domain/usecases/remote_usecases/weather_usecase.dart'
    as _i29;
import 'package:rock_n_roll_forecast/app/modules/weather/presentation/cubits/forecast/forecast_cubit.dart'
    as _i23;
import 'package:rock_n_roll_forecast/app/modules/weather/presentation/cubits/weather/weather_cubit.dart'
    as _i20;
import 'package:rock_n_roll_forecast/app/modules/weather/presentation/widgets/concerts_list.dart'
    as _i18;
import 'package:rock_n_roll_forecast/app/presentation/cubits/forecast/forecast_state.dart'
    as _i5;
import 'package:rock_n_roll_forecast/app/presentation/cubits/weather/weather_state.dart'
    as _i4;
import 'package:rock_n_roll_forecast/app/shared/errors/exceptions.dart' as _i38;
import 'package:rock_n_roll_forecast/app/shared/utilities/helpers/weather_helper.dart'
    as _i45;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeState_0<T extends _i1.StatefulWidget> extends _i2.SmartFake
    implements _i1.State<T> {
  _FakeState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_1 extends _i2.SmartFake
    implements _i1.StatefulElement {
  _FakeStatefulElement_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i2.SmartFake
    implements _i1.DiagnosticsNode {
  _FakeDiagnosticsNode_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeWeatherState_3 extends _i2.SmartFake implements _i4.WeatherState {
  _FakeWeatherState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecastState_4 extends _i2.SmartFake implements _i5.ForecastState {
  _FakeForecastState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_5<L, R> extends _i2.SmartFake implements _i6.Either<L, R> {
  _FakeEither_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherEntity_6 extends _i2.SmartFake implements _i7.WeatherEntity {
  _FakeWeatherEntity_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecastEntity_7 extends _i2.SmartFake
    implements _i8.ForecastEntity {
  _FakeForecastEntity_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalStorageAdapter_8 extends _i2.SmartFake
    implements _i9.LocalStorageAdapter {
  _FakeLocalStorageAdapter_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecastLocalDatasource_9 extends _i2.SmartFake
    implements _i10.ForecastLocalDatasource {
  _FakeForecastLocalDatasource_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherLocalDatasource_10 extends _i2.SmartFake
    implements _i10.WeatherLocalDatasource {
  _FakeWeatherLocalDatasource_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherRemoteDatasource_11 extends _i2.SmartFake
    implements _i11.WeatherRemoteDatasource {
  _FakeWeatherRemoteDatasource_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecastRemoteDatasource_12 extends _i2.SmartFake
    implements _i11.ForecastRemoteDatasource {
  _FakeForecastRemoteDatasource_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_13 extends _i2.SmartFake implements _i12.Client {
  _FakeClient_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherModel_14 extends _i2.SmartFake implements _i13.WeatherModel {
  _FakeWeatherModel_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFailure_15 extends _i2.SmartFake implements _i14.Failure {
  _FakeFailure_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_16<E> extends _i2.SmartFake implements _i15.Box<E> {
  _FakeBox_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_17 extends _i2.SmartFake implements _i12.Response {
  _FakeResponse_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_18 extends _i2.SmartFake
    implements _i12.StreamedResponse {
  _FakeStreamedResponse_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMethodCodec_19 extends _i2.SmartFake implements _i16.MethodCodec {
  _FakeMethodCodec_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBinaryMessenger_20 extends _i2.SmartFake
    implements _i17.BinaryMessenger {
  _FakeBinaryMessenger_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLazyBox_21<E1> extends _i2.SmartFake implements _i15.LazyBox<E1> {
  _FakeLazyBox_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_22 extends _i2.SmartFake implements _i1.Widget {
  _FakeWidget_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_23 extends _i2.SmartFake
    implements _i1.InheritedWidget {
  _FakeInheritedWidget_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [ConcertsList].
///
/// See the documentation for Mockito's code generation for more information.
class MockConcertsList extends _i2.Mock implements _i18.ConcertsList {
  MockConcertsList() {
    _i2.throwOnMissingStub(this);
  }

  @override
  List<dynamic> get locations => (super.noSuchMethod(
        Invocation.getter(#locations),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  Map<String, _i1.ValueNotifier<bool>> get loadingStates => (super.noSuchMethod(
        Invocation.getter(#loadingStates),
        returnValue: <String, _i1.ValueNotifier<bool>>{},
      ) as Map<String, _i1.ValueNotifier<bool>>);

  @override
  _i1.State<_i18.ConcertsList> createState() => (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
        ),
        returnValue: _FakeState_0<_i18.ConcertsList>(
          this,
          Invocation.method(
            #createState,
            [],
          ),
        ),
      ) as _i1.State<_i18.ConcertsList>);

  @override
  _i1.StatefulElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatefulElement_1(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i1.StatefulElement);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i1.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i1.DiagnosticsNode);

  @override
  List<_i1.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i1.DiagnosticsNode>[],
      ) as List<_i1.DiagnosticsNode>);

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [WeatherCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherCubit extends _i2.Mock implements _i20.WeatherCubit {
  MockWeatherCubit() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i4.WeatherState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWeatherState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.WeatherState);

  @override
  _i21.Stream<_i4.WeatherState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i21.Stream<_i4.WeatherState>.empty(),
      ) as _i21.Stream<_i4.WeatherState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i21.Future<void> getWeather(
    String? lat,
    String? lon,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [
            lat,
            lon,
            city,
          ],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  void emit(_i4.WeatherState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i22.Change<_i4.WeatherState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i21.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);
}

/// A class which mocks [ForecastCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastCubit extends _i2.Mock implements _i23.ForecastCubit {
  MockForecastCubit() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i5.ForecastState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeForecastState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.ForecastState);

  @override
  _i21.Stream<_i5.ForecastState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i21.Stream<_i5.ForecastState>.empty(),
      ) as _i21.Stream<_i5.ForecastState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i21.Future<void> getForecast(
    String? lat,
    String? lon,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecast,
          [
            lat,
            lon,
            city,
          ],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  void emit(_i5.ForecastState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i22.Change<_i5.ForecastState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i21.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);
}

/// A class which mocks [CacheForecastUseCaseImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheForecastUseCaseImpl extends _i2.Mock
    implements _i24.CacheForecastUseCaseImpl {
  MockCacheForecastUseCaseImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, void>> execute(
    List<_i8.ForecastEntity>? forecast,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            forecast,
            city,
          ],
        ),
        returnValue: _i21.Future<_i6.Either<_i14.Failure, void>>.value(
            _FakeEither_5<_i14.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [
              forecast,
              city,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, void>>);
}

/// A class which mocks [CacheWeatherUsecaseImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheWeatherUsecaseImpl extends _i2.Mock
    implements _i25.CacheWeatherUsecaseImpl {
  MockCacheWeatherUsecaseImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, void>> execute(
    _i7.WeatherEntity? weather,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            weather,
            city,
          ],
        ),
        returnValue: _i21.Future<_i6.Either<_i14.Failure, void>>.value(
            _FakeEither_5<_i14.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [
              weather,
              city,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, void>>);
}

/// A class which mocks [OfflineForecastUsecaseImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineForecastUsecaseImpl extends _i2.Mock
    implements _i26.OfflineForecastUsecaseImpl {
  MockOfflineForecastUsecaseImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>> execute(
          String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [city],
        ),
        returnValue: _i21
            .Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>.value(
            _FakeEither_5<_i14.Failure, List<_i8.ForecastEntity>>(
          this,
          Invocation.method(
            #execute,
            [city],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>);
}

/// A class which mocks [OfflineWeatherUsecaseImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineWeatherUsecaseImpl extends _i2.Mock
    implements _i27.OfflineWeatherUsecaseImpl {
  MockOfflineWeatherUsecaseImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>> execute(
          String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [city],
        ),
        returnValue:
            _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>>.value(
                _FakeEither_5<_i14.Failure, _i7.WeatherEntity?>(
          this,
          Invocation.method(
            #execute,
            [city],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>>);
}

/// A class which mocks [ForecastUsecaseImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastUsecaseImpl extends _i2.Mock
    implements _i28.ForecastUsecaseImpl {
  MockForecastUsecaseImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>> execute(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            lat,
            lon,
          ],
        ),
        returnValue: _i21
            .Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>.value(
            _FakeEither_5<_i14.Failure, List<_i8.ForecastEntity>>(
          this,
          Invocation.method(
            #execute,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>);
}

/// A class which mocks [WeatherUsecaseImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherUsecaseImpl extends _i2.Mock
    implements _i29.WeatherUsecaseImpl {
  MockWeatherUsecaseImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>> execute(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            lat,
            lon,
          ],
        ),
        returnValue:
            _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>>.value(
                _FakeEither_5<_i14.Failure, _i7.WeatherEntity>(
          this,
          Invocation.method(
            #execute,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>>);
}

/// A class which mocks [CacheForecastUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheForecastUseCase extends _i2.Mock
    implements _i24.CacheForecastUseCase {
  MockCacheForecastUseCase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, void>> execute(
    List<_i8.ForecastEntity>? forecast,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            forecast,
            city,
          ],
        ),
        returnValue: _i21.Future<_i6.Either<_i14.Failure, void>>.value(
            _FakeEither_5<_i14.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [
              forecast,
              city,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, void>>);
}

/// A class which mocks [CacheWeatherUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheWeatherUsecase extends _i2.Mock
    implements _i25.CacheWeatherUsecase {
  MockCacheWeatherUsecase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, void>> execute(
    _i7.WeatherEntity? weather,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            weather,
            city,
          ],
        ),
        returnValue: _i21.Future<_i6.Either<_i14.Failure, void>>.value(
            _FakeEither_5<_i14.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [
              weather,
              city,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, void>>);
}

/// A class which mocks [OfflineForecastUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineForecastUsecase extends _i2.Mock
    implements _i26.OfflineForecastUsecase {
  MockOfflineForecastUsecase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>> execute(
          String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [city],
        ),
        returnValue: _i21
            .Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>.value(
            _FakeEither_5<_i14.Failure, List<_i8.ForecastEntity>>(
          this,
          Invocation.method(
            #execute,
            [city],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>);
}

/// A class which mocks [OfflineWeatherUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineWeatherUsecase extends _i2.Mock
    implements _i27.OfflineWeatherUsecase {
  MockOfflineWeatherUsecase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>> execute(
          String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [city],
        ),
        returnValue:
            _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>>.value(
                _FakeEither_5<_i14.Failure, _i7.WeatherEntity?>(
          this,
          Invocation.method(
            #execute,
            [city],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>>);
}

/// A class which mocks [ForecastUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastUsecase extends _i2.Mock implements _i28.ForecastUsecase {
  MockForecastUsecase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>> execute(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            lat,
            lon,
          ],
        ),
        returnValue: _i21
            .Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>.value(
            _FakeEither_5<_i14.Failure, List<_i8.ForecastEntity>>(
          this,
          Invocation.method(
            #execute,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>);
}

/// A class which mocks [WeatherUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherUsecase extends _i2.Mock implements _i29.WeatherUsecase {
  MockWeatherUsecase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>> execute(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            lat,
            lon,
          ],
        ),
        returnValue:
            _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>>.value(
                _FakeEither_5<_i14.Failure, _i7.WeatherEntity>(
          this,
          Invocation.method(
            #execute,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>>);
}

/// A class which mocks [WeatherEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherEntity extends _i2.Mock implements _i7.WeatherEntity {
  MockWeatherEntity() {
    _i2.throwOnMissingStub(this);
  }

  @override
  double get lon => (super.noSuchMethod(
        Invocation.getter(#lon),
        returnValue: 0.0,
      ) as double);

  @override
  double get lat => (super.noSuchMethod(
        Invocation.getter(#lat),
        returnValue: 0.0,
      ) as double);

  @override
  double get wind => (super.noSuchMethod(
        Invocation.getter(#wind),
        returnValue: 0.0,
      ) as double);

  @override
  double get feelsLike => (super.noSuchMethod(
        Invocation.getter(#feelsLike),
        returnValue: 0.0,
      ) as double);

  @override
  String get main => (super.noSuchMethod(
        Invocation.getter(#main),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#main),
        ),
      ) as String);

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  String get iconCode => (super.noSuchMethod(
        Invocation.getter(#iconCode),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#iconCode),
        ),
      ) as String);

  @override
  int get temperature => (super.noSuchMethod(
        Invocation.getter(#temperature),
        returnValue: 0,
      ) as int);

  @override
  int get humidity => (super.noSuchMethod(
        Invocation.getter(#humidity),
        returnValue: 0,
      ) as int);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
}

/// A class which mocks [ForecastEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastEntity extends _i2.Mock implements _i8.ForecastEntity {
  MockForecastEntity() {
    _i2.throwOnMissingStub(this);
  }

  @override
  int get dailyTime => (super.noSuchMethod(
        Invocation.getter(#dailyTime),
        returnValue: 0,
      ) as int);

  @override
  num get dailyMinTemp => (super.noSuchMethod(
        Invocation.getter(#dailyMinTemp),
        returnValue: 0,
      ) as num);

  @override
  num get dailyMaxTemp => (super.noSuchMethod(
        Invocation.getter(#dailyMaxTemp),
        returnValue: 0,
      ) as num);

  @override
  String get dailyIcon => (super.noSuchMethod(
        Invocation.getter(#dailyIcon),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#dailyIcon),
        ),
      ) as String);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [LocationEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationEntity extends _i2.Mock implements _i30.LocationEntity {
  MockLocationEntity() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get city => (super.noSuchMethod(
        Invocation.getter(#city),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#city),
        ),
      ) as String);

  @override
  String get country => (super.noSuchMethod(
        Invocation.getter(#country),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#country),
        ),
      ) as String);
}

/// A class which mocks [WeatherModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherModel extends _i2.Mock implements _i13.WeatherModel {
  MockWeatherModel() {
    _i2.throwOnMissingStub(this);
  }

  @override
  double get lon => (super.noSuchMethod(
        Invocation.getter(#lon),
        returnValue: 0.0,
      ) as double);

  @override
  double get lat => (super.noSuchMethod(
        Invocation.getter(#lat),
        returnValue: 0.0,
      ) as double);

  @override
  double get wind => (super.noSuchMethod(
        Invocation.getter(#wind),
        returnValue: 0.0,
      ) as double);

  @override
  double get feelsLike => (super.noSuchMethod(
        Invocation.getter(#feelsLike),
        returnValue: 0.0,
      ) as double);

  @override
  String get main => (super.noSuchMethod(
        Invocation.getter(#main),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#main),
        ),
      ) as String);

  @override
  String get iconCode => (super.noSuchMethod(
        Invocation.getter(#iconCode),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#iconCode),
        ),
      ) as String);

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  int get temperature => (super.noSuchMethod(
        Invocation.getter(#temperature),
        returnValue: 0,
      ) as int);

  @override
  int get humidity => (super.noSuchMethod(
        Invocation.getter(#humidity),
        returnValue: 0,
      ) as int);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);

  @override
  _i7.WeatherEntity toEntity() => (super.noSuchMethod(
        Invocation.method(
          #toEntity,
          [],
        ),
        returnValue: _FakeWeatherEntity_6(
          this,
          Invocation.method(
            #toEntity,
            [],
          ),
        ),
      ) as _i7.WeatherEntity);
}

/// A class which mocks [ForecastModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastModel extends _i2.Mock implements _i31.ForecastModel {
  MockForecastModel() {
    _i2.throwOnMissingStub(this);
  }

  @override
  int get dailyTime => (super.noSuchMethod(
        Invocation.getter(#dailyTime),
        returnValue: 0,
      ) as int);

  @override
  num get dailyMinTemp => (super.noSuchMethod(
        Invocation.getter(#dailyMinTemp),
        returnValue: 0,
      ) as num);

  @override
  num get dailyMaxTemp => (super.noSuchMethod(
        Invocation.getter(#dailyMaxTemp),
        returnValue: 0,
      ) as num);

  @override
  String get dailyIcon => (super.noSuchMethod(
        Invocation.getter(#dailyIcon),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#dailyIcon),
        ),
      ) as String);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i8.ForecastEntity toEntity() => (super.noSuchMethod(
        Invocation.method(
          #toEntity,
          [],
        ),
        returnValue: _FakeForecastEntity_7(
          this,
          Invocation.method(
            #toEntity,
            [],
          ),
        ),
      ) as _i8.ForecastEntity);
}

/// A class which mocks [WeatherLocalDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalDatasourceImpl extends _i2.Mock
    implements _i32.WeatherLocalDatasourceImpl {
  MockWeatherLocalDatasourceImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.LocalStorageAdapter get localStorageAdapter => (super.noSuchMethod(
        Invocation.getter(#localStorageAdapter),
        returnValue: _FakeLocalStorageAdapter_8(
          this,
          Invocation.getter(#localStorageAdapter),
        ),
      ) as _i9.LocalStorageAdapter);

  @override
  _i21.Future<void> cacheWeather(
    _i7.WeatherEntity? weather,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheWeather,
          [
            weather,
            city,
          ],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<_i7.WeatherEntity?> offlineWeather(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #offlineWeather,
          [city],
        ),
        returnValue: _i21.Future<_i7.WeatherEntity?>.value(),
      ) as _i21.Future<_i7.WeatherEntity?>);
}

/// A class which mocks [ForecastLocalDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastLocalDatasourceImpl extends _i2.Mock
    implements _i32.ForecastLocalDatasourceImpl {
  MockForecastLocalDatasourceImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.LocalStorageAdapter get localStorageAdapter => (super.noSuchMethod(
        Invocation.getter(#localStorageAdapter),
        returnValue: _FakeLocalStorageAdapter_8(
          this,
          Invocation.getter(#localStorageAdapter),
        ),
      ) as _i9.LocalStorageAdapter);

  @override
  _i21.Future<void> cacheForecast(
    List<_i8.ForecastEntity>? forecasts,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheForecast,
          [
            forecasts,
            city,
          ],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<List<_i8.ForecastEntity>> offlineForecasts(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #offlineForecasts,
          [city],
        ),
        returnValue:
            _i21.Future<List<_i8.ForecastEntity>>.value(<_i8.ForecastEntity>[]),
      ) as _i21.Future<List<_i8.ForecastEntity>>);
}

/// A class which mocks [WeatherLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalDatasource extends _i2.Mock
    implements _i10.WeatherLocalDatasource {
  MockWeatherLocalDatasource() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<void> cacheWeather(
    _i7.WeatherEntity? weather,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheWeather,
          [
            weather,
            city,
          ],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<_i7.WeatherEntity?> offlineWeather(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #offlineWeather,
          [city],
        ),
        returnValue: _i21.Future<_i7.WeatherEntity?>.value(),
      ) as _i21.Future<_i7.WeatherEntity?>);
}

/// A class which mocks [ForecastLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastLocalDatasource extends _i2.Mock
    implements _i10.ForecastLocalDatasource {
  MockForecastLocalDatasource() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<void> cacheForecast(
    List<_i8.ForecastEntity>? forecasts,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheForecast,
          [
            forecasts,
            city,
          ],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<List<_i8.ForecastEntity>> offlineForecasts(String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #offlineForecasts,
          [city],
        ),
        returnValue:
            _i21.Future<List<_i8.ForecastEntity>>.value(<_i8.ForecastEntity>[]),
      ) as _i21.Future<List<_i8.ForecastEntity>>);
}

/// A class which mocks [ForecastLocalRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastLocalRepositoryImpl extends _i2.Mock
    implements _i33.ForecastLocalRepositoryImpl {
  MockForecastLocalRepositoryImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i10.ForecastLocalDatasource get localDatasource => (super.noSuchMethod(
        Invocation.getter(#localDatasource),
        returnValue: _FakeForecastLocalDatasource_9(
          this,
          Invocation.getter(#localDatasource),
        ),
      ) as _i10.ForecastLocalDatasource);

  @override
  _i21.Future<_i6.Either<_i14.Failure, void>> cacheForecast(
    List<_i8.ForecastEntity>? forecast,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheForecast,
          [
            forecast,
            city,
          ],
        ),
        returnValue: _i21.Future<_i6.Either<_i14.Failure, void>>.value(
            _FakeEither_5<_i14.Failure, void>(
          this,
          Invocation.method(
            #cacheForecast,
            [
              forecast,
              city,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, void>>);

  @override
  _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>
      offlineForecast(String? city) => (super.noSuchMethod(
            Invocation.method(
              #offlineForecast,
              [city],
            ),
            returnValue: _i21.Future<
                    _i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>.value(
                _FakeEither_5<_i14.Failure, List<_i8.ForecastEntity>>(
              this,
              Invocation.method(
                #offlineForecast,
                [city],
              ),
            )),
          ) as _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>);
}

/// A class which mocks [WeatherLocalRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalRepositoryImpl extends _i2.Mock
    implements _i33.WeatherLocalRepositoryImpl {
  MockWeatherLocalRepositoryImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i10.WeatherLocalDatasource get localDatasource => (super.noSuchMethod(
        Invocation.getter(#localDatasource),
        returnValue: _FakeWeatherLocalDatasource_10(
          this,
          Invocation.getter(#localDatasource),
        ),
      ) as _i10.WeatherLocalDatasource);

  @override
  _i21.Future<_i6.Either<_i14.Failure, void>> cacheWeather(
    _i7.WeatherEntity? weather,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheWeather,
          [
            weather,
            city,
          ],
        ),
        returnValue: _i21.Future<_i6.Either<_i14.Failure, void>>.value(
            _FakeEither_5<_i14.Failure, void>(
          this,
          Invocation.method(
            #cacheWeather,
            [
              weather,
              city,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, void>>);

  @override
  _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>> offlineWeather(
          String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #offlineWeather,
          [city],
        ),
        returnValue:
            _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>>.value(
                _FakeEither_5<_i14.Failure, _i7.WeatherEntity?>(
          this,
          Invocation.method(
            #offlineWeather,
            [city],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>>);
}

/// A class which mocks [ForecastLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastLocalRepository extends _i2.Mock
    implements _i34.ForecastLocalRepository {
  MockForecastLocalRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, void>> cacheForecast(
    List<_i8.ForecastEntity>? forecasts,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheForecast,
          [
            forecasts,
            city,
          ],
        ),
        returnValue: _i21.Future<_i6.Either<_i14.Failure, void>>.value(
            _FakeEither_5<_i14.Failure, void>(
          this,
          Invocation.method(
            #cacheForecast,
            [
              forecasts,
              city,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, void>>);

  @override
  _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>
      offlineForecast(String? city) => (super.noSuchMethod(
            Invocation.method(
              #offlineForecast,
              [city],
            ),
            returnValue: _i21.Future<
                    _i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>.value(
                _FakeEither_5<_i14.Failure, List<_i8.ForecastEntity>>(
              this,
              Invocation.method(
                #offlineForecast,
                [city],
              ),
            )),
          ) as _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>);
}

/// A class which mocks [WeatherLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalRepository extends _i2.Mock
    implements _i34.WeatherLocalRepository {
  MockWeatherLocalRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, void>> cacheWeather(
    _i7.WeatherEntity? weather,
    String? city,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheWeather,
          [
            weather,
            city,
          ],
        ),
        returnValue: _i21.Future<_i6.Either<_i14.Failure, void>>.value(
            _FakeEither_5<_i14.Failure, void>(
          this,
          Invocation.method(
            #cacheWeather,
            [
              weather,
              city,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, void>>);

  @override
  _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>> offlineWeather(
          String? city) =>
      (super.noSuchMethod(
        Invocation.method(
          #offlineWeather,
          [city],
        ),
        returnValue:
            _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>>.value(
                _FakeEither_5<_i14.Failure, _i7.WeatherEntity?>(
          this,
          Invocation.method(
            #offlineWeather,
            [city],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity?>>);
}

/// A class which mocks [WeatherRemoteRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteRepositoryImpl extends _i2.Mock
    implements _i35.WeatherRemoteRepositoryImpl {
  MockWeatherRemoteRepositoryImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i11.WeatherRemoteDatasource get remoteDatasource => (super.noSuchMethod(
        Invocation.getter(#remoteDatasource),
        returnValue: _FakeWeatherRemoteDatasource_11(
          this,
          Invocation.getter(#remoteDatasource),
        ),
      ) as _i11.WeatherRemoteDatasource);

  @override
  _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>> getWeather(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [
            lat,
            lon,
          ],
        ),
        returnValue:
            _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>>.value(
                _FakeEither_5<_i14.Failure, _i7.WeatherEntity>(
          this,
          Invocation.method(
            #getWeather,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>>);
}

/// A class which mocks [ForecastRemoteRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastRemoteRepositoryImpl extends _i2.Mock
    implements _i35.ForecastRemoteRepositoryImpl {
  MockForecastRemoteRepositoryImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i11.ForecastRemoteDatasource get remoteDatasource => (super.noSuchMethod(
        Invocation.getter(#remoteDatasource),
        returnValue: _FakeForecastRemoteDatasource_12(
          this,
          Invocation.getter(#remoteDatasource),
        ),
      ) as _i11.ForecastRemoteDatasource);

  @override
  _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>> getForecast(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecast,
          [
            lat,
            lon,
          ],
        ),
        returnValue: _i21
            .Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>.value(
            _FakeEither_5<_i14.Failure, List<_i8.ForecastEntity>>(
          this,
          Invocation.method(
            #getForecast,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>);
}

/// A class which mocks [WeatherRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteRepository extends _i2.Mock
    implements _i36.WeatherRemoteRepository {
  MockWeatherRemoteRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>> getWeather(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [
            lat,
            lon,
          ],
        ),
        returnValue:
            _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>>.value(
                _FakeEither_5<_i14.Failure, _i7.WeatherEntity>(
          this,
          Invocation.method(
            #getWeather,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, _i7.WeatherEntity>>);
}

/// A class which mocks [ForecastRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastRemoteRepository extends _i2.Mock
    implements _i36.ForecastRemoteRepository {
  MockForecastRemoteRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>> getForecast(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecast,
          [
            lat,
            lon,
          ],
        ),
        returnValue: _i21
            .Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>.value(
            _FakeEither_5<_i14.Failure, List<_i8.ForecastEntity>>(
          this,
          Invocation.method(
            #getForecast,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i6.Either<_i14.Failure, List<_i8.ForecastEntity>>>);
}

/// A class which mocks [WeatherRemoteDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDatasourceImpl extends _i2.Mock
    implements _i37.WeatherRemoteDatasourceImpl {
  MockWeatherRemoteDatasourceImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i12.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_13(
          this,
          Invocation.getter(#client),
        ),
      ) as _i12.Client);

  @override
  _i21.Future<_i13.WeatherModel> getWeather(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [
            lat,
            lon,
          ],
        ),
        returnValue: _i21.Future<_i13.WeatherModel>.value(_FakeWeatherModel_14(
          this,
          Invocation.method(
            #getWeather,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i13.WeatherModel>);
}

/// A class which mocks [ForecastRemoteDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastRemoteDatasourceImpl extends _i2.Mock
    implements _i37.ForecastRemoteDatasourceImpl {
  MockForecastRemoteDatasourceImpl() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i12.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_13(
          this,
          Invocation.getter(#client),
        ),
      ) as _i12.Client);

  @override
  _i21.Future<List<_i31.ForecastModel>> getForecast(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecast,
          [
            lat,
            lon,
          ],
        ),
        returnValue:
            _i21.Future<List<_i31.ForecastModel>>.value(<_i31.ForecastModel>[]),
      ) as _i21.Future<List<_i31.ForecastModel>>);
}

/// A class which mocks [WeatherRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDatasource extends _i2.Mock
    implements _i11.WeatherRemoteDatasource {
  MockWeatherRemoteDatasource() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i13.WeatherModel> getWeather(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [
            lat,
            lon,
          ],
        ),
        returnValue: _i21.Future<_i13.WeatherModel>.value(_FakeWeatherModel_14(
          this,
          Invocation.method(
            #getWeather,
            [
              lat,
              lon,
            ],
          ),
        )),
      ) as _i21.Future<_i13.WeatherModel>);
}

/// A class which mocks [ForecastRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastRemoteDatasource extends _i2.Mock
    implements _i11.ForecastRemoteDatasource {
  MockForecastRemoteDatasource() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<List<_i31.ForecastModel>> getForecast(
    String? lat,
    String? lon,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecast,
          [
            lat,
            lon,
          ],
        ),
        returnValue:
            _i21.Future<List<_i31.ForecastModel>>.value(<_i31.ForecastModel>[]),
      ) as _i21.Future<List<_i31.ForecastModel>>);
}

/// A class which mocks [CacheException].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheException extends _i2.Mock implements _i38.CacheException {
  MockCacheException() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i14.Failure get failure => (super.noSuchMethod(
        Invocation.getter(#failure),
        returnValue: _FakeFailure_15(
          this,
          Invocation.getter(#failure),
        ),
      ) as _i14.Failure);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i2.Mock
    implements _i39.ConnectivityService {
  MockConnectivityService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<bool> isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: _i21.Future<bool>.value(false),
      ) as _i21.Future<bool>);
}

/// A class which mocks [LocalStorageAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageAdapter extends _i2.Mock
    implements _i9.LocalStorageAdapter {
  MockLocalStorageAdapter() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i15.Box<dynamic>> openBox(String? name) => (super.noSuchMethod(
        Invocation.method(
          #openBox,
          [name],
        ),
        returnValue: _i21.Future<_i15.Box<dynamic>>.value(_FakeBox_16<dynamic>(
          this,
          Invocation.method(
            #openBox,
            [name],
          ),
        )),
      ) as _i21.Future<_i15.Box<dynamic>>);

  @override
  _i21.Future<void> put(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<dynamic> get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i21.Future<dynamic>.value(),
      ) as _i21.Future<dynamic>);

  @override
  _i21.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<bool> containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: _i21.Future<bool>.value(false),
      ) as _i21.Future<bool>);

  @override
  _i21.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i2.Mock implements _i12.Client {
  MockClient() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i12.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i21.Future<_i12.Response>.value(_FakeResponse_17(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i21.Future<_i12.Response>);

  @override
  _i21.Future<_i12.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i21.Future<_i12.Response>.value(_FakeResponse_17(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i21.Future<_i12.Response>);

  @override
  _i21.Future<_i12.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i21.Future<_i12.Response>.value(_FakeResponse_17(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i21.Future<_i12.Response>);

  @override
  _i21.Future<_i12.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i21.Future<_i12.Response>.value(_FakeResponse_17(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i21.Future<_i12.Response>);

  @override
  _i21.Future<_i12.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i21.Future<_i12.Response>.value(_FakeResponse_17(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i21.Future<_i12.Response>);

  @override
  _i21.Future<_i12.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i21.Future<_i12.Response>.value(_FakeResponse_17(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i21.Future<_i12.Response>);

  @override
  _i21.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i21.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i21.Future<String>);

  @override
  _i21.Future<_i41.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i21.Future<_i41.Uint8List>.value(_i41.Uint8List(0)),
      ) as _i21.Future<_i41.Uint8List>);

  @override
  _i21.Future<_i12.StreamedResponse> send(_i12.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i21.Future<_i12.StreamedResponse>.value(_FakeStreamedResponse_18(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i21.Future<_i12.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i2.Mock implements _i15.Box<E> {
  MockBox() {
    _i2.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i21.Stream<_i15.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i21.Stream<_i15.BoxEvent>.empty(),
      ) as _i21.Stream<_i15.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i21.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i21.Future<int>.value(0),
      ) as _i21.Future<int>);

  @override
  _i21.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i21.Future<Iterable<int>>.value(<int>[]),
      ) as _i21.Future<Iterable<int>>);

  @override
  _i21.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i21.Future<int>.value(0),
      ) as _i21.Future<int>);

  @override
  _i21.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);
}

/// A class which mocks [MethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannel extends _i2.Mock implements _i42.MethodChannel {
  MockMethodChannel() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i16.MethodCodec get codec => (super.noSuchMethod(
        Invocation.getter(#codec),
        returnValue: _FakeMethodCodec_19(
          this,
          Invocation.getter(#codec),
        ),
      ) as _i16.MethodCodec);

  @override
  _i17.BinaryMessenger get binaryMessenger => (super.noSuchMethod(
        Invocation.getter(#binaryMessenger),
        returnValue: _FakeBinaryMessenger_20(
          this,
          Invocation.getter(#binaryMessenger),
        ),
      ) as _i17.BinaryMessenger);

  @override
  _i21.Future<T?> invokeMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i21.Future<T?>.value(),
      ) as _i21.Future<T?>);

  @override
  _i21.Future<List<T>?> invokeListMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeListMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i21.Future<List<T>?>.value(),
      ) as _i21.Future<List<T>?>);

  @override
  _i21.Future<Map<K, V>?> invokeMapMethod<K, V>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMapMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i21.Future<Map<K, V>?>.value(),
      ) as _i21.Future<Map<K, V>?>);

  @override
  void setMethodCallHandler(
          _i21.Future<dynamic> Function(_i16.MethodCall)? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setMethodCallHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i2.Mock implements _i15.HiveInterface {
  MockHiveInterface() {
    _i2.throwOnMissingStub(this);
  }

  @override
  void init(
    String? path, {
    _i15.HiveStorageBackendPreference? backendPreference =
        _i15.HiveStorageBackendPreference.native,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #init,
          [path],
          {#backendPreference: backendPreference},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i21.Future<_i15.Box<E>> openBox<E>(
    String? name, {
    _i15.HiveCipher? encryptionCipher,
    _i15.KeyComparator? keyComparator = _i43.defaultKeyComparator,
    _i15.CompactionStrategy? compactionStrategy =
        _i44.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    _i41.Uint8List? bytes,
    String? collection,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #bytes: bytes,
            #collection: collection,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i21.Future<_i15.Box<E>>.value(_FakeBox_16<E>(
          this,
          Invocation.method(
            #openBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #bytes: bytes,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i21.Future<_i15.Box<E>>);

  @override
  _i21.Future<_i15.LazyBox<E>> openLazyBox<E>(
    String? name, {
    _i15.HiveCipher? encryptionCipher,
    _i15.KeyComparator? keyComparator = _i43.defaultKeyComparator,
    _i15.CompactionStrategy? compactionStrategy =
        _i44.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    String? collection,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openLazyBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #collection: collection,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i21.Future<_i15.LazyBox<E>>.value(_FakeLazyBox_21<E>(
          this,
          Invocation.method(
            #openLazyBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i21.Future<_i15.LazyBox<E>>);

  @override
  _i15.Box<E> box<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #box,
          [name],
        ),
        returnValue: _FakeBox_16<E>(
          this,
          Invocation.method(
            #box,
            [name],
          ),
        ),
      ) as _i15.Box<E>);

  @override
  _i15.LazyBox<E> lazyBox<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #lazyBox,
          [name],
        ),
        returnValue: _FakeLazyBox_21<E>(
          this,
          Invocation.method(
            #lazyBox,
            [name],
          ),
        ),
      ) as _i15.LazyBox<E>);

  @override
  bool isBoxOpen(String? name) => (super.noSuchMethod(
        Invocation.method(
          #isBoxOpen,
          [name],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i21.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<void> deleteBoxFromDisk(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBoxFromDisk,
          [name],
          {#path: path},
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  _i21.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i21.Future<void>.value(),
        returnValueForMissingStub: _i21.Future<void>.value(),
      ) as _i21.Future<void>);

  @override
  List<int> generateSecureKey() => (super.noSuchMethod(
        Invocation.method(
          #generateSecureKey,
          [],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  _i21.Future<bool> boxExists(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #boxExists,
          [name],
          {#path: path},
        ),
        returnValue: _i21.Future<bool>.value(false),
      ) as _i21.Future<bool>);

  @override
  void resetAdapters() => super.noSuchMethod(
        Invocation.method(
          #resetAdapters,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerAdapter<T>(
    _i15.TypeAdapter<T>? adapter, {
    bool? internal = false,
    bool? override = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerAdapter,
          [adapter],
          {
            #internal: internal,
            #override: override,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isAdapterRegistered(int? typeId) => (super.noSuchMethod(
        Invocation.method(
          #isAdapterRegistered,
          [typeId],
        ),
        returnValue: false,
      ) as bool);

  @override
  void ignoreTypeId<T>(int? typeId) => super.noSuchMethod(
        Invocation.method(
          #ignoreTypeId,
          [typeId],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MiscHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockMiscHelper extends _i2.Mock implements _i45.MiscHelper {
  MockMiscHelper() {
    _i2.throwOnMissingStub(this);
  }
}

/// A class which mocks [LocationHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationHelper extends _i2.Mock implements _i46.LocationHelper {
  MockLocationHelper() {
    _i2.throwOnMissingStub(this);
  }
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i2.Mock implements _i1.BuildContext {
  MockBuildContext() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_22(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i1.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i1.InheritedWidget dependOnInheritedElement(
    _i1.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_23(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i1.InheritedWidget);

  @override
  void visitAncestorElements(_i1.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i1.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i1.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i1.DiagnosticsNode describeElement(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i1.DiagnosticsNode);

  @override
  _i1.DiagnosticsNode describeWidget(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i1.DiagnosticsNode);

  @override
  List<_i1.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i1.DiagnosticsNode>[],
      ) as List<_i1.DiagnosticsNode>);

  @override
  _i1.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i1.DiagnosticsNode);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i2.Mock implements _i47.Connectivity {
  MockConnectivity() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i21.Stream<_i47.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i21.Stream<_i47.ConnectivityResult>.empty(),
      ) as _i21.Stream<_i47.ConnectivityResult>);

  @override
  _i21.Future<_i47.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i21.Future<_i47.ConnectivityResult>.value(
            _i47.ConnectivityResult.bluetooth),
      ) as _i21.Future<_i47.ConnectivityResult>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i2.Mock implements _i1.NavigatorObserver {
  MockNavigatorObserver() {
    _i2.throwOnMissingStub(this);
  }

  @override
  void didPush(
    _i1.Route<dynamic>? route,
    _i1.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(
    _i1.Route<dynamic>? route,
    _i1.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i1.Route<dynamic>? route,
    _i1.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didReplace({
    _i1.Route<dynamic>? newRoute,
    _i1.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture(
    _i1.Route<dynamic>? route,
    _i1.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RouteSettings].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockRouteSettings extends _i2.Mock implements _i1.RouteSettings {
  MockRouteSettings() {
    _i2.throwOnMissingStub(this);
  }
}
